// user index, load the ejs file
router.get('/', function(req, res) {
	res.locals.login = req.isAuthenticated();
	User.find(function(err, user) {
		res.render('index.ejs', 
			{ user: user });
	});
});

// json for all users (for testing)
router.get('/json', function(req, res) {
	User.find(function(err, user) {
		res.send(user);
	});
});

// // json for specific user, fetched by ajax to display markers on map
// router.get('/:id/json', function(req, res) {
// 	User.findById(req.params.id, function(err, user) {
// 		res.send(user);
// 	});
// });

// LOGOUT of session
router.get('/logout', function(req, res) {
    req.logout();
    res.redirect('/user');
});

// show page -- can only be viewed if logged in
router.get('/:id', isLoggedIn, function(req, res) {
		// for user control flow within template (enables editing only on the user's own page)
		req.params.id == req.user.id ? res.locals.usertrue = true : res.locals.usertrue = false;
		User.findById(req.params.id, function(err, user) {
			res.render('user/show.ejs', 
				{ user: user });
		});
});

// saves a new accomp to the accomp model and the user's accomp list
router.post('/:id/newAccomp', function(req, res) {
	User.findById(req.params.id, function(err, user) {
		var accomp = new Accomp(req.body);
		accomp.save(function(err, accomp) {
			user.accomp.push(accomp);
			user.save(function(err, user) {
				res.redirect('/user/' + req.params.id);
			});			
		});
	});
});

// user create -- signup
router.post('/', passport.authenticate('local-signup', { 
	failureRedirect: '/user' }), function(req, res) {
    //success redirect goes to show page
    res.redirect('/user/' + req.user.id);
});

// login
router.post('/', passport.authenticate('local-login', { 
	failureRedirect: '/user' }), function(req, res) {
    // success redirect goes to show page
    res.redirect('/user/' + req.user.id);
});

// delete 
router.delete('/:id', function(req, res) {
	console.log('DELETE ROUTE ACCESSED');
	User.findById(req.params.id, function(err, user) {
		if (user.accomp.length == 0) {
			user.remove(function(err) {
				res.redirect('/user');
			});
		} else {
			user.locations.forEach(function(location) {
				Location.findOneAndRemove({ _id: location.id }, function(err) {
					if (err) console.log(err);
				});
			});
			user.remove(function(err) {
				res.redirect('/user');
			});
		} // end if
	}); // end User find
});

// middleware to check login status
// used in show route
function isLoggedIn(req, res, next) {
	console.log('isLoggedIn middleware');
  if (req.isAuthenticated()) {
  	return next(); 
  } else {
  	res.redirect('/user');
  }
}